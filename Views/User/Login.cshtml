@model vmLoginModel

@{
	ViewBag.Title = "ViewModel";
	Layout = "~/Views/Shared/_LayoutLite.cshtml";
}

@if (TempData["str_message"] != null)
{ 
	<script>
		Swal.fire({
			icon: 'success',
			title: 'One more step !',
			text: TempData["str_message"]
		})
	</script>
}

<style>
	*,
	*:before,
	*:after {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	body {
		font-family: 'Open Sans', Helvetica, Arial, sans-serif;
		background: #ffffff;
	}

	input,
	button {
		border: none;
		outline: none;
		background: none;
		font-family: 'Open Sans', Helvetica, Arial, sans-serif;
	}

	.tip {
		font-size: 20px;
		margin: 40px auto 50px;
		text-align: center;
	}

	.cont {
		border-radius: 20px;
		overflow: hidden;
		position: relative;
		width: 900px;
		height: 550px;
		margin: 0 auto 100px;
		background: #fff;
		box-shadow: -10px -10px 15px rgba(255, 255, 255, 0.3), 10px 10px 15px rgba(70, 70, 70, 0.15), inset -10px -10px 15px rgba(255, 255, 255, 0.3), inset 10px 10px 15px rgba(70, 70, 70, 0.15);
	}

	.form {
		position: relative;
		width: 640px;
		height: 100%;
		-webkit-transition: -webkit-transform 1.2s ease-in-out;
		transition: -webkit-transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out, -webkit-transform 1.2s ease-in-out;
		padding: 50px 30px 0;
	}

	.sub-cont {
		overflow: hidden;
		position: absolute;
		left: 640px;
		top: 0;
		width: 900px;
		height: 100%;
		padding-left: 260px;
		background: #fff;
		-webkit-transition: -webkit-transform 1.2s ease-in-out;
		transition: -webkit-transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out, -webkit-transform 1.2s ease-in-out;
	}

	.cont.s--signup .sub-cont {
		-webkit-transform: translate3d(-640px, 0, 0);
		transform: translate3d(-640px, 0, 0);
	}

	button {
		display: block;
		margin: 0 auto;
		width: 260px;
		height: 36px;
		border-radius: 30px;
		color: #fff;
		font-size: 15px;
		cursor: pointer;
	}

	.img {
		overflow: hidden;
		z-index: 2;
		position: absolute;
		left: 0;
		top: 0;
		width: 260px;
		height: 100%;
		padding-top: 360px;
	}

	.img:before {
		content: '';
		position: absolute;
		right: 0;
		top: 0;
		width: 900px;
		height: 100%;
		background-image: url('../../images/nathan-dumlao-kixfbedyp64-unsplash.jpg');
		opacity: .8;
		background-size: cover;
		-webkit-transition: -webkit-transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out, -webkit-transform 1.2s ease-in-out;
	}

	.img:after {
		content: '';
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.6);
	}

	.cont.s--signup .img:before {
		-webkit-transform: translate3d(640px, 0, 0);
		transform: translate3d(640px, 0, 0);
	}

	.img__text {
		z-index: 2;
		position: absolute;
		left: 0;
		top: 50px;
		width: 100%;
		padding: 0 20px;
		text-align: center;
		color: #fff;
		-webkit-transition: -webkit-transform 1.2s ease-in-out;
		transition: -webkit-transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out;
		transition: transform 1.2s ease-in-out, -webkit-transform 1.2s ease-in-out;
	}

	.img__text h2 {
		margin-bottom: 10px;
		font-weight: normal;
	}

	.img__text p {
		font-size: 14px;
		line-height: 1.5;
	}

	.cont.s--signup .img__text.m--up {
		-webkit-transform: translateX(520px);
		transform: translateX(520px);
	}

	.img__text.m--in {
		-webkit-transform: translateX(-520px);
		transform: translateX(-520px);
	}

	.cont.s--signup .img__text.m--in {
		-webkit-transform: translateX(0);
		transform: translateX(0);
	}

	.img__btn {
		overflow: hidden;
		z-index: 2;
		position: relative;
		width: 100px;
		height: 36px;
		margin: 0 auto;
		background: transparent;
		color: #fff;
		text-transform: uppercase;
		font-size: 15px;
		cursor: pointer;
	}

	.img__btn:after {
		content: '';
		z-index: 2;
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		border: 2px solid #fff;
		border-radius: 30px;
	}

	.img__btn span {
		position: absolute;
		left: 0;
		top: 0;
		display: -webkit-box;
		display: flex;
		-webkit-box-pack: center;
		justify-content: center;
		-webkit-box-align: center;
		align-items: center;
		width: 100%;
		height: 100%;
		-webkit-transition: -webkit-transform 1.2s;
		transition: -webkit-transform 1.2s;
		transition: transform 1.2s;
		transition: transform 1.2s, -webkit-transform 1.2s;
	}

	.img__btn span.m--in {
		-webkit-transform: translateY(-72px);
		transform: translateY(-72px);
	}

	.cont.s--signup .img__btn span.m--in {
		-webkit-transform: translateY(0);
		transform: translateY(0);
	}

	.cont.s--signup .img__btn span.m--up {
		-webkit-transform: translateY(72px);
		transform: translateY(72px);
	}

	h2 {
		width: 100%;
		font-size: 26px;
		text-align: center;
	}

	label {
		display: block;
		width: 260px;
		margin: 25px auto 0;
		text-align: center;
	}

	label span {
		font-size: 12px;
		color: #cfcfcf;
		text-transform: uppercase;
	}

	input {
		display: block;
		width: 100%;
		margin-top: 5px;
		padding-bottom: 5px;
		font-size: 16px;
		border-bottom: 1px solid rgba(0, 0, 0, 0.4);
		text-align: center;
	}

	.forgot-pass {
		margin-top: 15px;
		text-align: center;
		font-size: 12px;
		color: #cfcfcf;
	}

	.submit {
		margin-top: 40px;
		margin-bottom: 20px;
		background: #d4af7a;
		text-transform: uppercase;
	}

	.fb-btn {
		border: 2px solid #d3dae9;
		color: #8fa1c7;
	}

	.fb-btn span {
		font-weight: bold;
		color: #455a81;
	}

	.sign-in {
		-webkit-transition-timing-function: ease-out;
		transition-timing-function: ease-out;
	}

	.cont.s--signup .sign-in {
		-webkit-transition-timing-function: ease-in-out;
		transition-timing-function: ease-in-out;
		-webkit-transition-duration: 1.2s;
		transition-duration: 1.2s;
		-webkit-transform: translate3d(640px, 0, 0);
		transform: translate3d(640px, 0, 0);
	}

	.sign-up {
		-webkit-transform: translate3d(-900px, 0, 0);
		transform: translate3d(-900px, 0, 0);
	}

	.cont.s--signup .sign-up {
		-webkit-transform: translate3d(0, 0, 0);
		transform: translate3d(0, 0, 0);
	}
</style>


<!-- <div class="cont form-horizontal">-->
<div class="cont">

	@Html.ValidationSummary(true, "", new { @class = "text-danger" })
	<!--<div class="form sign-in form-group"> -->
	@using (Html.BeginForm("Login", "User", FormMethod.Post))
	{
		@*<form name="signin">*@
		<div class="form sign-in form-group">
			<h2>Welcome back,</h2>
			<br />
			<br />

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.LoginModel.UserNo)
				</span>
				<span>
					@Html.EditorFor(model => model.LoginModel.UserNo)
					@Html.ValidationMessageFor(model => model.LoginModel.UserNo, "", new { @class = "text-danger" })
				</span>

			</label>

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.LoginModel.Password)
				</span>
				<span>
					@Html.EditorFor(model => model.LoginModel.Password)
					@Html.ValidationMessageFor(model => model.LoginModel.Password, "", new { @class = "text-danger" })
				</span>
			</label>

			@*@Html.LabelFor(model => model.UserNo, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.UserNo, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.UserNo, "", new { @class = "text-danger" })
				</div>

				<div class="form-group">
					@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-10">
						@Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
					</div>
				</div>*@

			@*<div class="form-group">
					<div class="col-md-offset-2 col-md-10">
						<input type="submit" value="Create" class="btn btn-default" />
					</div>
				</div>*@
			<p class="forgot-pass">Forgot password?</p>
			@*@Html.ActionLink("Forgot password?", "Forget", "User", null, new {@class = "forgot-pass" })*@
			<button type="submit" id="signin" class="submit form-group">Sign In</button>
			@*@Html.ActionLink("Sign In", "Register", "User", null, new { @type = "submit", @class = "submit form-group" })*@
			<button type="button" class="fb-btn">Connect with <span>facebook</span></button>
		</div>
		@*</form>*@
	}
	<div class="sub-cont">
		<div class="img">
			<div class="img__text m--up">
				<h2>New here?</h2>
				<p>Sign up and discover great amount of new opportunities!</p>
			</div>
			<div class="img__text m--in">
				<h2>One of us?</h2>
				<p>If you already has an account, just sign in. We've missed you!</p>
			</div>
			<div class="img__btn">
				<span class="m--up">Sign Up</span>
				<span class="m--in">Sign In</span>
			</div>
		</div>
		@using (Html.BeginForm("Register", "User", FormMethod.Post))
		{
			@*<form name="signup" class="form sign-up form-group">*@
			<h2>Time to feel like home,</h2>

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.RegisterModel.UserNo)
				</span>
				<span>
					@Html.EditorFor(model => model.RegisterModel.UserNo)
					@Html.ValidationMessageFor(model => model.RegisterModel.UserNo, "", new { @class = "text-danger" })
				</span>

			</label>

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.RegisterModel.UserName)
				</span>
				<span>
					@Html.EditorFor(model => model.RegisterModel.UserName)
					@Html.ValidationMessageFor(model => model.RegisterModel.UserName, "", new { @class = "text-danger" })
				</span>
			</label>

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.RegisterModel.Email)
				</span>
				<span>
					@Html.EditorFor(model => model.RegisterModel.Email)
					@Html.ValidationMessageFor(model => model.RegisterModel.Email, "", new { @class = "text-danger" })
				</span>
			</label>

			<label class="form-group">
				<span>
					@Html.LabelFor(model => model.RegisterModel.Password)
				</span>
				<span>
					@Html.EditorFor(model => model.RegisterModel.Password)
					@Html.ValidationMessageFor(model => model.RegisterModel.Password, "", new { @class = "text-danger" })
				</span>
			</label>
			@*<label>
					<span>Username</span>
					<input type="text" />
				</label>
				<label>
					<span>Email</span>
					<input type="email" />
				</label>
				<label>
					<span>Password</span>
					<input type="password" />
				</label>*@
			<button type="submit" id="signup" class="submit form-group">Sign Up</button>

			<button type="button" class="fb-btn">Join with <span>facebook</span></button>
			@*</form>*@
		}
	</div>
</div>

<script>
	document.querySelector('.img__btn').addEventListener('click', function () {
		document.querySelector('.cont').classList.toggle('s--signup');
	});

</script>


<div>
	@Html.ActionLink("Back to HomePage", "Index", "Home")
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
}
